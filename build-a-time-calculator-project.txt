** start of main.py **

def add_time(start, duration, day=None):
    # Parse the start time
    start_time, period = start.split()
    start_hour, start_minute = map(int, start_time.split(':'))
    
    # Convert to 24-hour format
    if period == 'PM' and start_hour != 12:
        start_hour += 12
    elif period == 'AM' and start_hour == 12:
        start_hour = 0
    
    # Parse the duration
    duration_hour, duration_minute = map(int, duration.split(':'))
    
    # Calculate total minutes
    total_minutes = start_hour * 60 + start_minute + duration_hour * 60 + duration_minute
    
    # Calculate new time
    new_hour = (total_minutes // 60) % 24
    new_minute = total_minutes % 60
    
    # Determine period (AM/PM)
    if new_hour < 12:
        new_period = 'AM'
    else:
        new_period = 'PM'
    
    # Convert to 12-hour format
    display_hour = new_hour % 12
    if display_hour == 0:
        display_hour = 12
    
    # Format the time string
    new_time = f"{display_hour}:{new_minute:02d} {new_period}"
    
    # Calculate days later
    days_later = total_minutes // (24 * 60)
    
    # Handle day of week if provided
    if day:
        days_of_week = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 
                        'Thursday', 'Friday', 'Saturday']
        current_day = day.lower().capitalize()
        day_index = days_of_week.index(current_day)
        new_day_index = (day_index + days_later) % 7
        new_day = days_of_week[new_day_index]
        new_time += f", {new_day}"
    
    # Add day information
    if days_later == 1:
        new_time += " (next day)"
    elif days_later > 1:
        new_time += f" ({days_later} days later)"
    
    return new_time

** end of main.py **

